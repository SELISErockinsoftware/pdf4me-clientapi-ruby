=begin
#DmsApi

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'date'

module Pdf4me
  # Define Stamp to place on Document
  class StampAction
    attr_accessor :page_sequence

    attr_accessor :relative_pos_x

    attr_accessor :relative_pos_y

    attr_accessor :size_x

    attr_accessor :size_y

    attr_accessor :rotate

    attr_accessor :autoorientation

    # The opacity of the stamp as a whole. 1.0 for fully opaque, 0.0 for fully transparent.  Default: 1.0  The PDF/A-1 standard does not allow transparency.Therefore, for PDF/A-1 conforming input files you must  not set alpha to a value other than 1.0
    attr_accessor :alpha

    # Modify scale of stamp. Allowed values for ‹scale_set› are:   - relToA4: Scale the stamp relative to the page size. For example, make stamp half as large on a A5 and  twice as large on a A3 page as specified.
    attr_accessor :scale

    attr_accessor :align_x

    attr_accessor :align_y

    attr_accessor :stamp_type

    attr_accessor :text

    attr_accessor :image

    attr_accessor :custom_properties

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'page_sequence' => :'pageSequence',
        :'relative_pos_x' => :'relativePosX',
        :'relative_pos_y' => :'relativePosY',
        :'size_x' => :'sizeX',
        :'size_y' => :'sizeY',
        :'rotate' => :'rotate',
        :'autoorientation' => :'autoorientation',
        :'alpha' => :'alpha',
        :'scale' => :'scale',
        :'align_x' => :'alignX',
        :'align_y' => :'alignY',
        :'stamp_type' => :'stampType',
        :'text' => :'text',
        :'image' => :'image',
        :'custom_properties' => :'customProperties'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'page_sequence' => :'String',
        :'relative_pos_x' => :'Integer',
        :'relative_pos_y' => :'Integer',
        :'size_x' => :'Integer',
        :'size_y' => :'Integer',
        :'rotate' => :'Float',
        :'autoorientation' => :'BOOLEAN',
        :'alpha' => :'Float',
        :'scale' => :'String',
        :'align_x' => :'String',
        :'align_y' => :'String',
        :'stamp_type' => :'String',
        :'text' => :'Text',
        :'image' => :'Image',
        :'custom_properties' => :'Array<KeyValuePairStringString>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'pageSequence')
        self.page_sequence = attributes[:'pageSequence']
      end

      if attributes.has_key?(:'relativePosX')
        self.relative_pos_x = attributes[:'relativePosX']
      end

      if attributes.has_key?(:'relativePosY')
        self.relative_pos_y = attributes[:'relativePosY']
      end

      if attributes.has_key?(:'sizeX')
        self.size_x = attributes[:'sizeX']
      end

      if attributes.has_key?(:'sizeY')
        self.size_y = attributes[:'sizeY']
      end

      if attributes.has_key?(:'rotate')
        self.rotate = attributes[:'rotate']
      end

      if attributes.has_key?(:'autoorientation')
        self.autoorientation = attributes[:'autoorientation']
      end

      if attributes.has_key?(:'alpha')
        self.alpha = attributes[:'alpha']
      end

      if attributes.has_key?(:'scale')
        self.scale = attributes[:'scale']
      end

      if attributes.has_key?(:'alignX')
        self.align_x = attributes[:'alignX']
      end

      if attributes.has_key?(:'alignY')
        self.align_y = attributes[:'alignY']
      end

      if attributes.has_key?(:'stampType')
        self.stamp_type = attributes[:'stampType']
      end

      if attributes.has_key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.has_key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.has_key?(:'customProperties')
        if (value = attributes[:'customProperties']).is_a?(Array)
          self.custom_properties = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      scale_validator = EnumAttributeValidator.new('String', ["relToA4"])
      return false unless scale_validator.valid?(@scale)
      align_x_validator = EnumAttributeValidator.new('String', ["left", "center", "right"])
      return false unless align_x_validator.valid?(@align_x)
      align_y_validator = EnumAttributeValidator.new('String', ["top", "middle", "bottom"])
      return false unless align_y_validator.valid?(@align_y)
      stamp_type_validator = EnumAttributeValidator.new('String', ["annotation", "foreground", "background"])
      return false unless stamp_type_validator.valid?(@stamp_type)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scale Object to be assigned
    def scale=(scale)
      validator = EnumAttributeValidator.new('String', ["relToA4"])
      unless validator.valid?(scale)
        fail ArgumentError, "invalid value for 'scale', must be one of #{validator.allowable_values}."
      end
      @scale = scale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] align_x Object to be assigned
    def align_x=(align_x)
      validator = EnumAttributeValidator.new('String', ["left", "center", "right"])
      unless validator.valid?(align_x)
        fail ArgumentError, "invalid value for 'align_x', must be one of #{validator.allowable_values}."
      end
      @align_x = align_x
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] align_y Object to be assigned
    def align_y=(align_y)
      validator = EnumAttributeValidator.new('String', ["top", "middle", "bottom"])
      unless validator.valid?(align_y)
        fail ArgumentError, "invalid value for 'align_y', must be one of #{validator.allowable_values}."
      end
      @align_y = align_y
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stamp_type Object to be assigned
    def stamp_type=(stamp_type)
      validator = EnumAttributeValidator.new('String', ["annotation", "foreground", "background"])
      unless validator.valid?(stamp_type)
        fail ArgumentError, "invalid value for 'stamp_type', must be one of #{validator.allowable_values}."
      end
      @stamp_type = stamp_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          page_sequence == o.page_sequence &&
          relative_pos_x == o.relative_pos_x &&
          relative_pos_y == o.relative_pos_y &&
          size_x == o.size_x &&
          size_y == o.size_y &&
          rotate == o.rotate &&
          autoorientation == o.autoorientation &&
          alpha == o.alpha &&
          scale == o.scale &&
          align_x == o.align_x &&
          align_y == o.align_y &&
          stamp_type == o.stamp_type &&
          text == o.text &&
          image == o.image &&
          custom_properties == o.custom_properties
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [page_sequence, relative_pos_x, relative_pos_y, size_x, size_y, rotate, autoorientation, alpha, scale, align_x, align_y, stamp_type, text, image, custom_properties].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pdf4me.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
