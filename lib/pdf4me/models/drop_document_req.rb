=begin
#DmsApi

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'date'

module Pdf4me

  class DropDocumentReq
    attr_accessor :notification

    attr_accessor :job_id

    attr_accessor :document_id

    attr_accessor :user_id

    attr_accessor :url

    attr_accessor :document

    attr_accessor :file_name

    attr_accessor :cloud_storage_provider

    attr_accessor :cloud_storage_files

    attr_accessor :cloud_storage_files_desc

    # Run the action asynchronously, get notified for any status changes.
    attr_accessor :get_notified

    attr_accessor :connection_id

    attr_accessor :user_fingerprint

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'notification' => :'notification',
        :'job_id' => :'jobId',
        :'document_id' => :'documentId',
        :'user_id' => :'userId',
        :'url' => :'url',
        :'document' => :'document',
        :'file_name' => :'fileName',
        :'cloud_storage_provider' => :'cloudStorageProvider',
        :'cloud_storage_files' => :'cloudStorageFiles',
        :'cloud_storage_files_desc' => :'cloudStorageFilesDesc',
        :'get_notified' => :'getNotified',
        :'connection_id' => :'connectionId',
        :'user_fingerprint' => :'userFingerprint'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'notification' => :'Notification',
        :'job_id' => :'String',
        :'document_id' => :'String',
        :'user_id' => :'String',
        :'url' => :'String',
        :'document' => :'String',
        :'file_name' => :'String',
        :'cloud_storage_provider' => :'String',
        :'cloud_storage_files' => :'Array<String>',
        :'cloud_storage_files_desc' => :'String',
        :'get_notified' => :'BOOLEAN',
        :'connection_id' => :'String',
        :'user_fingerprint' => :'UserFingerprint'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'notification')
        self.notification = attributes[:'notification']
      end

      if attributes.has_key?(:'jobId')
        self.job_id = attributes[:'jobId']
      end

      if attributes.has_key?(:'documentId')
        self.document_id = attributes[:'documentId']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'document')
        self.document = attributes[:'document']
      end

      if attributes.has_key?(:'fileName')
        self.file_name = attributes[:'fileName']
      end

      if attributes.has_key?(:'cloudStorageProvider')
        self.cloud_storage_provider = attributes[:'cloudStorageProvider']
      end

      if attributes.has_key?(:'cloudStorageFiles')
        if (value = attributes[:'cloudStorageFiles']).is_a?(Array)
          self.cloud_storage_files = value
        end
      end

      if attributes.has_key?(:'cloudStorageFilesDesc')
        self.cloud_storage_files_desc = attributes[:'cloudStorageFilesDesc']
      end

      if attributes.has_key?(:'getNotified')
        self.get_notified = attributes[:'getNotified']
      end

      if attributes.has_key?(:'connectionId')
        self.connection_id = attributes[:'connectionId']
      end

      if attributes.has_key?(:'userFingerprint')
        self.user_fingerprint = attributes[:'userFingerprint']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@document.nil? && @document !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        invalid_properties.push("invalid value for 'document', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@document.nil? && @document !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      cloud_storage_provider_validator = EnumAttributeValidator.new('String', ["undef", "local", "url", "oneDrive", "dropbox", "googleDrive", "kloudless"])
      return false unless cloud_storage_provider_validator.valid?(@cloud_storage_provider)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] document Value to be assigned
    def document=(document)

      if !document.nil? && document !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        fail ArgumentError, "invalid value for 'document', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/."
      end

      @document = document
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cloud_storage_provider Object to be assigned
    def cloud_storage_provider=(cloud_storage_provider)
      validator = EnumAttributeValidator.new('String', ["undef", "local", "url", "oneDrive", "dropbox", "googleDrive", "kloudless"])
      unless validator.valid?(cloud_storage_provider)
        fail ArgumentError, "invalid value for 'cloud_storage_provider', must be one of #{validator.allowable_values}."
      end
      @cloud_storage_provider = cloud_storage_provider
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          notification == o.notification &&
          job_id == o.job_id &&
          document_id == o.document_id &&
          user_id == o.user_id &&
          url == o.url &&
          document == o.document &&
          file_name == o.file_name &&
          cloud_storage_provider == o.cloud_storage_provider &&
          cloud_storage_files == o.cloud_storage_files &&
          cloud_storage_files_desc == o.cloud_storage_files_desc &&
          get_notified == o.get_notified &&
          connection_id == o.connection_id &&
          user_fingerprint == o.user_fingerprint
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [notification, job_id, document_id, user_id, url, document, file_name, cloud_storage_provider, cloud_storage_files, cloud_storage_files_desc, get_notified, connection_id, user_fingerprint].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pdf4me.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
