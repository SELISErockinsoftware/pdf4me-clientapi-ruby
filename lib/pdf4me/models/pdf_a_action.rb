=begin
#DmsApi

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'date'

module Pdf4me
  # The CreatePdfA accepts files from many different applications and automatically   converts them into PDF/A. The level of conformity can be set to level A, U, or B. ICC color profiles for   device-dependent color profiles and font types are embedded in the document.There is an option to provide   the entire character set for fonts (no subsetting) to facilitate editing at a later stage. Missing fonts   are reproduced as close to the original as possible via font recognition. Metadata can be generated   automatically or added from external sources. The tool also detects and automatically repairs problems   typical of the PDF format.A digital signature can be applied and a conformity check carried out at the   end of the process.
  class PdfAAction
    # By default, fonts that are embedded are automatically subset to minimize the file size.   If for any reason, e.g. postprocessing, fonts shall not be subset, set the property   SubsetFonts to false. Whether fonts are subset or not is irrelevant with respect to   the compliance with PDF/A. (Relevant is only that all used glyphs are contained in the font program.)   Additionals Fonts can be given in this FontsToSubset List
    attr_accessor :fonts_to_subset

    # Other listed entries (e.g. ePDF10, ePDF11, .. .ePDF17, ePDFUnk) are not supported as output compliance   level.  Some files cannot be converted to the compliance requested. This will be  detected and up- (AllowUpgrade) or downgrade (AllowDowngrade) the compliance automatically.
    attr_accessor :compliance

    # If set to True, automatic downgrade of the PDF/A conformance level is allowed, e.g. from PDF/A-1a to PDF/A-1b.  If this property is set to True, the level is downgraded under the following conditions:    - Downgrade to level B: If a file contains text that is not extractable (i.e.missing ToUnicode information).  Example: Downgrade PDF/A-2u to PDF/A-2b.  - Downgrade to level U (PDF/A-2 and PDF/A-3) or B(PDF/A-1): Level A requires logical structure information and  “tagging” information, so if a file contains no such information, its level is downgraded.  <para>  Logical structure information in a PDF defines the structure of content, such as titles, paragraphs, figures, reading order, tables or articles.Logical structure elements can be “tagged” with descriptions or alternative text.  “Tagging” allows the contents of an image to be described to the visually impaired.  It is not possible for Pdf/A converter to add meaningful tagging information. Adding  tagging information without prior knowledge about the input file’s structure and content is neither possible nor  allowed by the PDF/A standard. For that reason, the conformance level is automatically downgraded to level B or U.  Example: Downgrade PDF/A-1a to PDF/A-1b.  </para><para>  If set to False and an input file cannot be converted to the requested standard, e.g.because of missing “tagging”  information, the conversion is aborted and the ErrorCode set to PDF_E_DOWNGRADE.  </para>
    attr_accessor :allow_downgrade

    #  If set to True, automatic upgrade of the PDF/A version is allowed. If the target standard is PDF/A-1 and a file  contains elements that cannot be converted to PDF/A-1, the target standard is upgraded to PDF/A-2. This avoids  significant visual differences in the output file.  For example, the following elements may lead to an automatic upgrade:  - Transpanrecy  - Optional content groups(OCG, layers)  - Real values that exceed the implementation limit of PDF/A-1  - Embedded OpenType font files  - Predefined CMap encodings in Type0 fonts     If set to False, the compliance is not upgraded.Depeding on the value of the ConversionErrorMask the  conversion this will fail with a conversion error PDF_E_CONVERSION
    attr_accessor :allow_upgrade

    # <para>              Set or get the path to the ICC profile for the output intent.              </para>  <para>              The given profile is embedded only if the input file does not contain a PDF/A output intent already              </para>
    attr_accessor :output_intent_profile

    # <para>              Get or set whether to linearize the PDF output file, i.e. optimize file for fast web access.              A linearized document has a slightly larger file size than a non-linearized file and provides the following main features:              - When a document is opened in a PDF viewer of a web browser, the first page can be viewed without downloading the entire               PDF file.In contrast, a non-linearized PDF file must be downloaded completely before the firstpage can be displayed.              - When another page is requested by the user, that page is displayed as quickly as possible and incrementally as              data arrives, without downloading the entire PDF file.              </para>  <para>              Signed files cannot be linearizes.So this property must be set to False if              a digital signature is applied.              </para>
    attr_accessor :linearize

    attr_accessor :custom_properties

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fonts_to_subset' => :'fontsToSubset',
        :'compliance' => :'compliance',
        :'allow_downgrade' => :'allowDowngrade',
        :'allow_upgrade' => :'allowUpgrade',
        :'output_intent_profile' => :'outputIntentProfile',
        :'linearize' => :'linearize',
        :'custom_properties' => :'customProperties'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'fonts_to_subset' => :'Array<PdfFont>',
        :'compliance' => :'String',
        :'allow_downgrade' => :'BOOLEAN',
        :'allow_upgrade' => :'BOOLEAN',
        :'output_intent_profile' => :'String',
        :'linearize' => :'BOOLEAN',
        :'custom_properties' => :'Array<KeyValuePairStringString>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'fontsToSubset')
        if (value = attributes[:'fontsToSubset']).is_a?(Array)
          self.fonts_to_subset = value
        end
      end

      if attributes.has_key?(:'compliance')
        self.compliance = attributes[:'compliance']
      end

      if attributes.has_key?(:'allowDowngrade')
        self.allow_downgrade = attributes[:'allowDowngrade']
      end

      if attributes.has_key?(:'allowUpgrade')
        self.allow_upgrade = attributes[:'allowUpgrade']
      end

      if attributes.has_key?(:'outputIntentProfile')
        self.output_intent_profile = attributes[:'outputIntentProfile']
      end

      if attributes.has_key?(:'linearize')
        self.linearize = attributes[:'linearize']
      end

      if attributes.has_key?(:'customProperties')
        if (value = attributes[:'customProperties']).is_a?(Array)
          self.custom_properties = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      compliance_validator = EnumAttributeValidator.new('String', ["pdfA1b", "pdfA1a", "pdfA2b", "pdfA2u", "pdfA2a", "pdfA3b", "pdfA3u", "pdfA3a"])
      return false unless compliance_validator.valid?(@compliance)
      output_intent_profile_validator = EnumAttributeValidator.new('String', ["notSet", "sRGBColorSpace"])
      return false unless output_intent_profile_validator.valid?(@output_intent_profile)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compliance Object to be assigned
    def compliance=(compliance)
      validator = EnumAttributeValidator.new('String', ["pdfA1b", "pdfA1a", "pdfA2b", "pdfA2u", "pdfA2a", "pdfA3b", "pdfA3u", "pdfA3a"])
      unless validator.valid?(compliance)
        fail ArgumentError, "invalid value for 'compliance', must be one of #{validator.allowable_values}."
      end
      @compliance = compliance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] output_intent_profile Object to be assigned
    def output_intent_profile=(output_intent_profile)
      validator = EnumAttributeValidator.new('String', ["notSet", "sRGBColorSpace"])
      unless validator.valid?(output_intent_profile)
        fail ArgumentError, "invalid value for 'output_intent_profile', must be one of #{validator.allowable_values}."
      end
      @output_intent_profile = output_intent_profile
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fonts_to_subset == o.fonts_to_subset &&
          compliance == o.compliance &&
          allow_downgrade == o.allow_downgrade &&
          allow_upgrade == o.allow_upgrade &&
          output_intent_profile == o.output_intent_profile &&
          linearize == o.linearize &&
          custom_properties == o.custom_properties
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [fonts_to_subset, compliance, allow_downgrade, allow_upgrade, output_intent_profile, linearize, custom_properties].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pdf4me.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
