=begin
#DmsApi

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'date'

module Pdf4me

  class DocMetadata
    attr_accessor :title

    attr_accessor :subject

    attr_accessor :page_count

    attr_accessor :size

    attr_accessor :is_encrypted

    attr_accessor :pdf_compliance

    attr_accessor :is_signed

    attr_accessor :uploaded_mime_type

    attr_accessor :uploaded_file_size


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'subject' => :'subject',
        :'page_count' => :'pageCount',
        :'size' => :'size',
        :'is_encrypted' => :'isEncrypted',
        :'pdf_compliance' => :'pdfCompliance',
        :'is_signed' => :'isSigned',
        :'uploaded_mime_type' => :'uploadedMimeType',
        :'uploaded_file_size' => :'uploadedFileSize'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'title' => :'String',
        :'subject' => :'String',
        :'page_count' => :'Integer',
        :'size' => :'Integer',
        :'is_encrypted' => :'BOOLEAN',
        :'pdf_compliance' => :'String',
        :'is_signed' => :'BOOLEAN',
        :'uploaded_mime_type' => :'String',
        :'uploaded_file_size' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'pageCount')
        self.page_count = attributes[:'pageCount']
      end

      if attributes.has_key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.has_key?(:'isEncrypted')
        self.is_encrypted = attributes[:'isEncrypted']
      end

      if attributes.has_key?(:'pdfCompliance')
        self.pdf_compliance = attributes[:'pdfCompliance']
      end

      if attributes.has_key?(:'isSigned')
        self.is_signed = attributes[:'isSigned']
      end

      if attributes.has_key?(:'uploadedMimeType')
        self.uploaded_mime_type = attributes[:'uploadedMimeType']
      end

      if attributes.has_key?(:'uploadedFileSize')
        self.uploaded_file_size = attributes[:'uploadedFileSize']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @page_count.nil?
        invalid_properties.push("invalid value for 'page_count', page_count cannot be nil.")
      end

      if @size.nil?
        invalid_properties.push("invalid value for 'size', size cannot be nil.")
      end

      if @is_encrypted.nil?
        invalid_properties.push("invalid value for 'is_encrypted', is_encrypted cannot be nil.")
      end

      if @is_signed.nil?
        invalid_properties.push("invalid value for 'is_signed', is_signed cannot be nil.")
      end

      if @uploaded_file_size.nil?
        invalid_properties.push("invalid value for 'uploaded_file_size', uploaded_file_size cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @page_count.nil?
      return false if @size.nil?
      return false if @is_encrypted.nil?
      return false if @is_signed.nil?
      return false if @uploaded_file_size.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          subject == o.subject &&
          page_count == o.page_count &&
          size == o.size &&
          is_encrypted == o.is_encrypted &&
          pdf_compliance == o.pdf_compliance &&
          is_signed == o.is_signed &&
          uploaded_mime_type == o.uploaded_mime_type &&
          uploaded_file_size == o.uploaded_file_size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [title, subject, page_count, size, is_encrypted, pdf_compliance, is_signed, uploaded_mime_type, uploaded_file_size].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pdf4me.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
