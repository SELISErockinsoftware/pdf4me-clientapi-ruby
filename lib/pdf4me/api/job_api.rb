=begin
#DmsApi

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module Pdf4me
  class JobApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # CreateArchiveJobConfig
    # Create Archive Job which continuesly converts your PDF to Pdf-A.
    # @param [Hash] opts the optional parameters
    # @option opts [ArchiveJobReq] :req 
    # @return [ArchiveJobReq]
    def create_archive_job_config(opts = {})
      data, _status_code, _headers = create_archive_job_config_with_http_info(opts)
      return data
    end

    # CreateArchiveJobConfig
    # Create Archive Job which continuesly converts your PDF to Pdf-A.
    # @param [Hash] opts the optional parameters
    # @option opts [ArchiveJobReq] :req 
    # @return [Array<(ArchiveJobReq, Fixnum, Hash)>] ArchiveJobReq data, response status code and response headers
    def create_archive_job_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobApi.create_archive_job_config ..."
      end
      # resource path
      local_var_path = "/Job/CreateArchiveJobConfig"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/bson'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/bson'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'req'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArchiveJobReq')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#create_archive_job_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # JobConfigs
    # Give a list of user defined Job Configurations.
    # @param [Hash] opts the optional parameters
    # @return [Array<JobConfig>]
    def job_configs(opts = {})
      data, _status_code, _headers = job_configs_with_http_info(opts)
      return data
    end

    # JobConfigs
    # Give a list of user defined Job Configurations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JobConfig>, Fixnum, Hash)>] Array<JobConfig> data, response status code and response headers
    def job_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobApi.job_configs ..."
      end
      # resource path
      local_var_path = "/Job/JobConfigs"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/bson'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JobConfig>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#job_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # RunJob
    # Run a JobConfig with given Document Data. Documents can be given directly in the Job or as a Documen Reference.
    # @param [Hash] opts the optional parameters
    # @option opts [Job] :req 
    # @return [RunJobRes]
    def run_job(opts = {})
      data, _status_code, _headers = run_job_with_http_info(opts)
      return data
    end

    # RunJob
    # Run a JobConfig with given Document Data. Documents can be given directly in the Job or as a Documen Reference.
    # @param [Hash] opts the optional parameters
    # @option opts [Job] :req 
    # @return [Array<(RunJobRes, Fixnum, Hash)>] RunJobRes data, response status code and response headers
    def run_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobApi.run_job ..."
      end
      # resource path
      local_var_path = "/Job/RunJob"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/bson'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/bson'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'req'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RunJobRes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#run_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # SaveJobConfig
    # Create a Job Configuration for recurring executions or pipelining of pdf4me functionality.  With pipelining it is possible to run pdf4me base functionality in a specific order as a single execution.
    # @param [Hash] opts the optional parameters
    # @option opts [JobConfig] :req 
    # @return [JobConfigRes]
    def save_job_config(opts = {})
      data, _status_code, _headers = save_job_config_with_http_info(opts)
      return data
    end

    # SaveJobConfig
    # Create a Job Configuration for recurring executions or pipelining of pdf4me functionality.  With pipelining it is possible to run pdf4me base functionality in a specific order as a single execution.
    # @param [Hash] opts the optional parameters
    # @option opts [JobConfig] :req 
    # @return [Array<(JobConfigRes, Fixnum, Hash)>] JobConfigRes data, response status code and response headers
    def save_job_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobApi.save_job_config ..."
      end
      # resource path
      local_var_path = "/Job/SaveJobConfig"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/bson'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/bson'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'req'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobConfigRes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#save_job_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
