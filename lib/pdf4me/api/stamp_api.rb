=begin
#DmsApi

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module Pdf4me
  class StampApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Stamp] :req 
    # @return [StampRes]
    def stamp(opts = {})
      data, _status_code, _headers = stamp_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Stamp] :req 
    # @return [Array<(StampRes, Fixnum, Hash)>] StampRes data, response status code and response headers
    def stamp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StampApi.stamp ..."
      end
      # resource path
      local_var_path = "/Stamp/Stamp"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/bson'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/bson'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'req'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StampRes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StampApi#stamp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param align_x 
    # @param align_y 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :text 
    # @option opts [String] :pages 
    # @option opts [String] :file 
    # @return [File]
    def text_stamp(align_x, align_y, opts = {})
      data, _status_code, _headers = text_stamp_with_http_info(align_x, align_y, opts)
      return data
    end

    # 
    # 
    # @param align_x 
    # @param align_y 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :text 
    # @option opts [String] :pages 
    # @option opts [String] :file 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def text_stamp_with_http_info(align_x, align_y, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StampApi.text_stamp ..."
      end
      # verify the required parameter 'align_x' is set
      if @api_client.config.client_side_validation && align_x.nil?
        fail ArgumentError, "Missing the required parameter 'align_x' when calling StampApi.text_stamp"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['left', 'center', 'right'].include?(align_x)
        fail ArgumentError, "invalid value for 'align_x', must be one of left, center, right"
      end
      # verify the required parameter 'align_y' is set
      if @api_client.config.client_side_validation && align_y.nil?
        fail ArgumentError, "Missing the required parameter 'align_y' when calling StampApi.text_stamp"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['top', 'middle', 'bottom'].include?(align_y)
        fail ArgumentError, "invalid value for 'align_y', must be one of top, middle, bottom"
      end
      # resource path
      local_var_path = "/Stamp/TextStamp"

      # query parameters
      query_params = {}
      # query_params[:'alignX'] = align_x
      # query_params[:'alignY'] = align_y
      # query_params[:'text'] = opts[:'text'] if !opts[:'text'].nil?
      # query_params[:'pages'] = opts[:'pages'] if !opts[:'pages'].nil?
      # query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      header_params['Content-Type'] ='multipart/form-data'

      # form parameters
      form_params = {
        alignX: align_x,
        alignY: align_y,
        text: opts[:text],
        pages: opts[:pages],
        file: opts[:file]
      }

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StampApi#text_stamp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
